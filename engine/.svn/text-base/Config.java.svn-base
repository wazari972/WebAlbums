package display;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import constante.Path;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.JDBCException;
import net.sf.hibernate.Session;
import net.sf.hibernate.Transaction;
import traverse.FilesFinder;
import util.HibernateUtil;
import util.StringUtil;
import Entity.Auteur;
import Entity.Photo;
import Entity.Tag;
import Entity.Utilisateur;
import display.WebPage.Mode;

public class Config extends HttpServlet {
	private static final long serialVersionUID = -628341734743684910L;
	
	public void init() {
		Path.setLocation(this) ;
	}
	
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	
		WebPage.treat(WebPage.Page.CONFIG, request, response) ;
	}
	protected static void treatCONFIG(HttpServletRequest request, StringBuilder output) throws HibernateException {
		String auteur = (String) request.getSession().getAttribute("AuteurID") ;
		String action = request.getParameter("action") ;
		
		if (WebPage.isLoggerAsCurrentAuthor(request)) {
			
			if ("IMPORT".equals(action)) {
				treatIMPORT(auteur, output);
			}
			output.append("<b>Importations des albums d'un auteur : </b><br/><br/>\n"+
					  	  "<form action='/WebAlbums/servlet/display.Config' method='get'>\n"+
					  	  "<input type='hidden' name='action' value='IMPORT'/>\n"+
					  	  "<input type='text' name='auteur' size='20' maxlenght='20' value='"+WebPage.getAuteurName(request)+"' disabled/>\n"+
					  	  "<input type='submit' value='Importer'/>\n"+
					  	  "</form>\n"+
					  	  "<br/><br/>\n");
			
			//ajout d'un nouveau tag
			if ("NEWTAG".equals(action)) {
				treatNEWTAG(request, auteur, output);	
			}
			output.append("<b>Ajout de thèmes</b><br/><br/>\n"+
						  "<form action='/WebAlbums/servlet/display.Config' method='get'>\n"+
					  	  "<input type='hidden' name='action' value='NEWTAG'/>\n"+
					  	  "<input name='nom' type='text' size='20' maxlength='20'/>\n"+
					  	  "<input type='submit' value='Valider'/>\n"+
					  	  "</form>\n"+
					  	  "<br/><br/>\n");
			
			//ajout d'un nouveau tag
			if ("MODTAG".equals(action)) {
				treatMODTAG(request, auteur, output);	
			}
			output.append("<b>Renommage d'un thèmes</b><br/><br/>\n"+
						  "<form action='/WebAlbums/servlet/display.Config' method='get'>\n"+
					  	  "<input type='hidden' name='action' value='MODTAG'/>\n"+
					  	  "<table>" +
					  	  "	<tr>"+
					  	  "		<td align='left'> Ancien : </td>" +
					  	  "		<td>");
			WebPage.displayList(Mode.THEME, request, output, WebPage.Box.LIST);
			output.append("		</td>"+
						  "	</tr>"+
					  	  "	<tr>"+
					  	  "		<td align='left'> Nouveau : </td>" +
					  	  "		<td>"+
						  "			<input name='nouveau' type='text' size='20' maxlength='20'/>\n"+
						  "		</td>"+
						  "	</tr>"+
					  	  "<table>" +
					  	  "<input type='submit' value='Valider'/>\n"+
					  	  "</form>\n"+
					  	  "<br/><br/>\n");
			
			//suppression d'un tag
			if ("DELTAG".equals(action)) {
				treatDELTAG(request, auteur, output);	
			}
			output.append("<b>Suppression de thèmes</b><br/><br/>\n"+
			              "<form action='/WebAlbums/servlet/display.Config' method='get'>\n"+
			          	  "<input type='hidden' name='action' value='DELTAG'/>\n");
			WebPage.displayList(Mode.THEME, request, output, WebPage.Box.LIST);
			output.append("<br/>\n" +
					      "Yes ? <input type='text' name='sure' size='3' maxlength='3'/><br/>\n"+
						  "<input type='submit' value='Valider' />\n"+
						  "</form>\n"+
					  	  "<br/><br/>\n");
			
			//ajout d'un utilisateur
			if ("NEWUSER".equals(action)) {
				treatNEWUSER(request, output, auteur);	
			}
			output.append("<b>Ajout d'un utilisateur</b><br/><br/>\n"+
						  "<form action='/WebAlbums/servlet/display.Config' method='get'>\n"+
					  	  "<input type='hidden' name='action' value='NEWUSER'/>\n"+
					  	  "Nom : <input name='nom' type='text' size='20' maxlength='20'/> <br/>\n"+
					  	  "Mot de passe : <input name='pass' type='text' size='20' maxlength='20'/><br/>\n"+
					  	  "<input type='submit' value='Valider' />\n"+
					  	  "</form>\n"+
					  	  "<br/><br/>\n");
			
			//suppression d'un utilisateur
			if ("DELUSER".equals(action)) {
				treatDELUSER(request, output, auteur);
			}
			
			output.append("<b>Suppression d'utilisateur</b><br/><br/>\n"+
						  "<form action='/WebAlbums/servlet/display.Config' method='get'>\n"+
						  "<input type='hidden' name='action' value='DELUSER'/>\n");
			WebPage.displayList(Mode.USER, request, output, WebPage.Box.LIST);
			output.append("<br/>\n" +
						  "Yes ? <input type='text' name='sure' size='3' maxlength='3'/><br/>\n"+
						  "<input type='submit' value='Valider'/>\n"+
			  			  "</form>\n");
			
			output.append("<br/><br/>\n");
			
		} else {
			output.append("<i> Vous n'etes pas l'auteur de ces albums ...</i><br/>\n");
		}
		
		output.append("<br/><br/><a href='/WebAlbums/servlet/display.Choix'>Retour aux choix</a>\n");
	}
	private static void treatMODTAG(HttpServletRequest request, String auteur, StringBuilder output) throws HibernateException {
		String rq = null ;
		Transaction tx = WebPage.session.beginTransaction();
		String nouveau = StringUtil.escapeHTML(request.getParameter("nouveau")) ;
		String themes = StringUtil.escapeHTML(request.getParameter("themes")) ;
		try {
			rq = "from Tag where id = '"+themes+"' and auteur='"+auteur+"'" ;
			Tag tag = (Tag) WebPage.session.find(rq).iterator().next() ;
			tag.setNom (nouveau) ;
			WebPage.session.update(tag) ;
		} catch (JDBCException e) {
			if (e.getSQLException().toString().contains("Duplicate")) {
				output.append("<i>Le tag </i>'"+nouveau+"'<i> est déjà dans la base ...</i><br/><br/>\n");
			} else {
				output.append("<i> Impossible d'effectuer la requete' :</i>"+rq+"<br/>"+e+"<br/>\n"+e.getSQLException()+"<br/>\n");
			}
			tx.rollback() ;
		} catch (NoSuchElementException e) {
			output.append("<i>Impossible de trouver ce tag chez cet auteur  ...</i>\n");
			tx.rollback() ;
		}
		
	}
	private static void treatIMPORT(String auteur, StringBuilder output) throws HibernateException {
		String rq = null ;
		try {
			Session session = HibernateUtil.currentSession();
			rq = "from Auteur where id='"+auteur+"'" ;
			String auteurName = ((Auteur) session.find(rq).iterator().next()).getNom();
			rq = "done" ;
			
			output.append("<i>Begining ...</i>\n") ;
			new FilesFinder ().importAuthor(auteurName, output);
			output.append("<i>Well done !</i>\n") ;
		} catch (NullPointerException e) {
			output.append("<i>Nom de l'auteur est vide ...</i>\n");
		} catch (JDBCException e) {
			output.append("<i> Impossible d'effectuer la requete' :</i>"+rq+"<br/>"+e+"<br/>\n"+e.getSQLException()+"<br/>\n");
		}
		output.append("<br/><br/>\n");
	}
	private static void treatNEWTAG(HttpServletRequest request, String auteur, StringBuilder output) throws HibernateException {
		String rq = null ;
		Transaction tx = WebPage.session.beginTransaction();
		String nom = StringUtil.escapeHTML(request.getParameter("nom")) ;
		try {
			if (nom != null && !nom.equals("")) {
				Tag t = new Tag () ;
				
				t.setNom(nom) ;
				t.setAuteur(Integer.parseInt(auteur));
				WebPage.session.save(t) ;
				
				tx.commit();
				output.append("<i>Tag </i>'"+nom+"'<i> correctement ajouté</i><br/><br/>\n");
			} else {
				output.append("<i>Le nom du tag est vide ...</i><br/><br/>\n");
			}
		} catch (NumberFormatException e) {
			output.append("<i>Impossible de parser l'id de l'auteur ("+auteur+") ...</i><br/><br/>\n");
			tx.rollback();
		} catch (JDBCException e) {
			if (e.getSQLException().toString().contains("Duplicate")) {
				output.append("<i>Le tag </i>'"+nom+"'<i> est déjà dans la base ...</i><br/><br/>\n");
			} else {
				output.append("<i> Impossible d'effectuer la requete' :</i>"+rq+"<br/>"+e+"<br/>\n"+e.getSQLException()+"<br/>\n");
			}
			tx.rollback();
		}
	}
	private static void treatDELTAG(HttpServletRequest request, String auteur, StringBuilder output) throws HibernateException {
		String rq = null ;
		String[] themes = request.getParameterValues("themes");
		String sure = request.getParameter("sure") ;
		try {
			if (themes != null && String.CASE_INSENSITIVE_ORDER.compare(sure, "yes") == 0) {
				Transaction tx = WebPage.session.beginTransaction();
				
				rq = "select photo from TagPhoto photo, Tag tag where tag.Auteur = '"+auteur+"' and tag.ID in ( '-1'" ;
				for (int i = 0; i < themes.length; i++) {
					rq += ", '"+themes[i]+"' " ;
				}
				rq += ") and tag.ID = photo.Tag";
				List list = WebPage.session.find(rq) ;
				rq = "done" ;
				output.append("<i> Suppression de "+list.size()+" Tags Photo</i><br/>\n");
				Iterator it = list.iterator();
				while (it.hasNext()) {
					WebPage.session.delete(it.next());
				}
				
				rq = "from Tag where auteur = '"+auteur+"' and ID in ( '-1'" ;
				for (int i = 0; i < themes.length; i++) {
					rq += ", '"+themes[i]+"' " ;
				}
				rq += ")";
				list = WebPage.session.find(rq) ;
				rq = "done" ;
				output.append("<i> Suppression de "+list.size()+" Tags</i><br/>\n");
				it = list.iterator();
				while (it.hasNext()) {
					WebPage.session.delete(it.next());
				}
				tx.commit();
				output.append("<br/>\n");
			} else {
				output.append("<i> ah soit vous n'êtes pas sûr ("+sure+"), soit vous voullez rien supprimer :)</i><br/><br/>\n");
			}
		} catch (JDBCException e) {
			output.append("<i> Impossible d'effectuer la requete' :</i>"+rq+"<br/>\n"+e+"<br/>\n"+e.getSQLException()+"<br/>\n");
		}
	}

	private static void treatNEWUSER(HttpServletRequest request, StringBuilder output, String auteur) throws HibernateException {
		Transaction tx = null ;
		String rq = null ;
		try {
			tx = WebPage.session.beginTransaction();
			
			Utilisateur t = new Utilisateur () ;
			String nom = StringUtil.escapeHTML(request.getParameter("nom")) ;
			String pass = StringUtil.escapeHTML(request.getParameter("pass")) ;
		
		
			if (nom != null && !nom.equals("")) {
				t.setNom(nom) ;
				t.setAuteur(Integer.parseInt(auteur));
				t.setPassword(("".equals(pass) ? null : pass)) ;
				WebPage.session.save(t) ;
				
				output.append("<i>Utilisateur </i>'"+nom+"'<i> correctement ajouté</i><br/><br/>\n");
				tx.commit();
			} else {
				output.append("<i>Le nom de l'utilisateur est vide ...</i><br/><br/>\n");
			}
		} catch (NumberFormatException e) {
			tx.rollback();
			output.append("<i>Impossible de parser l'id de l'auteur ("+auteur+") ...</i><br/><br/>\n");
		} catch (JDBCException e) {
			output.append("<i> Impossible d'effectuer la requete' :</i>"+rq+"<br/>\n"+e+"<br/>\n"+e.getSQLException()+"<br/>\n");
		}
	}
	private static void treatDELUSER(HttpServletRequest request, StringBuilder output, String auteur) throws HibernateException {
		String rq;
		String[] users = request.getParameterValues("users");
		String sure = request.getParameter("sure") ;
		if (users != null && String.CASE_INSENSITIVE_ORDER.compare(sure, "yes") == 0) {
			rq = null;
			Transaction tx = WebPage.session.beginTransaction();
			try {
				rq = "select albm from UserAlbum albm, Utilisateur user where user.Auteur = '"+auteur+"' and user.ID in ( '-1'" ;
				for (int i = 0; i < users.length; i++) {
					rq += ", '"+StringUtil.escapeHTML(users[i])+"' " ;
				}
				rq += ") and user.ID = albm.User";
				List list = WebPage.session.find(rq) ;
				rq = "done" ;
				output.append("<i> Suppression de "+list.size()+" Users Album</i><br/>\n");
				Iterator it = list.iterator();
				while (it.hasNext()) {
					WebPage.session.delete(it.next());
				}
				
				rq = "select photo from UserPhoto photo, Utilisateur user where user.Auteur = '"+auteur+"' and user.ID in ( '-1'" ;
				for (int i = 0; i < users.length; i++) {
					rq += ", '"+users[i]+"' " ;
				}
				rq += ") and user.ID = photo.User";
				list = WebPage.session.find(rq) ;
				rq = "done" ;
				output.append("<i> Suppression de "+list.size()+" Users Photo</i><br/>\n");
				it = list.iterator();
				while (it.hasNext()) {
					WebPage.session.delete(it.next());
				}
				
				rq = "from Utilisateur where auteur = '"+auteur+"' and ID in ( '-1'" ;
				for (int i = 0; i < users.length; i++) {
					rq += ", '"+users[i]+"' " ;
				}
				rq += ")";
				list = WebPage.session.find(rq) ;
				rq = "done" ;
				output.append("<i> Suppression de "+list.size()+" utilisateur</i><br/>\n");
				it = list.iterator();
				while (it.hasNext()) {
					WebPage.session.delete(it.next());
				}
				tx.commit();
				output.append("<br/>\n");
			}catch (JDBCException e) {
				tx.rollback();
				output.append("<i> Impossible d'effectuer la manip' :</i><br/>\n"+rq+"<br/>\n"+e+"<br/>\n"+e.getSQLException()+"<br/>\n");
			}
		} else {
			output.append("<i> ah soit vous n'êtes pas sûr ("+sure+"), soit vous voullez rien supprimer :)</i><br/><br/>\n");
		}
	}

	public static void main(String[] args) {
		String rq = "from Photo ph where ph.Model is NULL" ;
		try {
			Transaction tx = WebPage.session.beginTransaction();
			List lst = WebPage.session.find(rq) ;
			System.out.println("il y en a "+lst.size());
			Iterator it = lst.iterator() ;
			while (it.hasNext()) {
				Photo ph = (Photo) it.next() ;
				System.out.println(ph);
				ph.retreiveExif() ;
			}
			tx.commit();
		} catch (HibernateException e) {
			e.printStackTrace();
		}
	}
}
